// JavaScript Document
let result = "";

let firstPass = true;

let fileD = "";

let charArr = [];

let lineArr = [];

let pointerArr = [];

let currentVoice = 0;

$("#myfile").on("change", function (changeEvent) {
  for (var i = 0; i < changeEvent.target.files.length; ++i) {
    (function (file) {               // Wrap current file in a closure.
      var loader = new FileReader();
      loader.onload = function (loadEvent) {
        if (loadEvent.target.readyState != 2)
          return;
        if (loadEvent.target.error) {
          alert("Error while reading file " + file.name + ": " + loadEvent.target.error);
          return;
        }
        console.log(loadEvent.target.result.length); // Your text is in loadEvent.target.result
      };
      loader.readAsBinaryString(file);
    })(changeEvent.target.files[i]);
  }
});

function startConvert(){
	if (document.getElementById('stringSelect').value == "Encode"){
		if (document.getElementById("count").checked){
			count = document.getElementById('text').value.length;
			res = changeEndianness2(count.toString(16).padStart(4,'0')) + "000000000000";
			res += stringEncoder(document.getElementById('text').value);
			res += "0000"
			document.getElementById("results").innerHTML = res;
		} else {
			document.getElementById("results").innerHTML = stringEncoder(document.getElementById('text').value);
		}
	} else if (document.getElementById('stringSelect').value == "Trim") {
		if (document.getElementById("clipboard").checked){
			navigator.clipboard.readText()
  				.then(text => {
  					hexTrim(text);
  					if (document.getElementById("download").checked){
						let a = document.createElement('a');
						a.href = "data:application/octet-stream,"+encodeURIComponent(result);
						a.download = 'result.txt';
						a.click();
					}
					if (document.getElementById("display").checked){
						document.getElementById("results").innerHTML = result;
					}	
  				})
  				.catch(err => {
    				console.error('Failed to read clipboard contents: ', err);
  				});
  	} else {
			hexTrim(document.getElementById('text').value);
			if (document.getElementById("download").checked){
			let a = document.createElement('a');
			a.href = "data:application/octet-stream,"+encodeURIComponent(result);
			a.download = 'result.txt';
			a.click();
			}
			if (document.getElementById("display").checked){
				document.getElementById("results").innerHTML = result;
			}
		}	

	} else if (document.getElementById('stringSelect').value == "Line Build"){
			document.getElementById("results").innerHTML = lineBuild(document.getElementById('text').value, document.getElementById('char').value, document.getElementById('lineNum').value); 
	} else {
		if (document.getElementById("clipboard").checked){
			navigator.clipboard.readText()
  				.then(text => {
  					stringDecoder(text);
  					if (document.getElementById("download").checked){
						let a = document.createElement('a');
						a.href = "data:application/octet-stream,"+encodeURIComponent(result);
						a.download = 'result.txt';
						a.click();
					}
					if (document.getElementById("display").checked){
						document.getElementById("results").innerHTML = result;
					}	
  				})
  				.catch(err => {
    				console.error('Failed to read clipboard contents: ', err);
  				});

		} else {
			stringDecoder(document.getElementById('text').value);
			if (document.getElementById("download").checked){
			let a = document.createElement('a');
			a.href = "data:application/octet-stream,"+encodeURIComponent(result);
			a.download = 'result.txt';
			a.click();
			}
			if (document.getElementById("display").checked){
				document.getElementById("results").innerHTML = result;
			}	
		}
	
	}
}

function generateName(){
	let name = "";
	name = document.getElementById('text').value;
	if (name.length > 16) {
		alert("Name too long!");
		return;
	} else if (name == "") {
		alert("Nothing entered!");
		return;
	}

	let text = stringEncoder(name);

	if (text.indexOf('ï¿½') != -1){
		alert("Invalid character detected! Please only use letters, numbers, spaces, and basic punctuation.");
		return;
	}


	let charID = document.getElementById('charID').value;

	charID = charID.replace(/\s/g,'');

	charID = parseInt(charID, 16);

	if (isNaN(charID)){
		alert("Error in character ID! Please make sure you've entered a proper ID.");
		return;
	}
	

	for (let i = 0; i < charArr.length; i++){
		if (charID == charArr[i]){
			alert("ID already has name changed");
			return;
		}
	}

	charArr.push(charID);

	let jackOffset = 0xD1C8;

	let ganzBase = 0xD538;

	let offset = ((charID - 0x2) * 0x370);

	if (charID == 1){
		offset = jackOffset;
	} else {
		offset = ganzBase + offset;
	}

	let offset1, offset2, offest3, offest4, offest5, offest6, offest7, offest8;



	if (text.length % 8 != 0){
		text += "0000";
	}

	let add1, add2, add3, add4, add5, add6, add7, add8;

	for (let i = 0; i < 8; i++){
		switch(i){
			case 0:
				let temp = text.substring(0,8);
				text = text.substring(8);
				add1 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				offset1 = offset.toString(16).toUpperCase();
				offset1 = String("00000000" + offset1).slice(-8);
				break;
			case 1:
				if (text.length == 0){
					add2 = "00000000";
				} else {
					let temp = text.substring(0,8);
					text = text.substring(8);
					add2 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				}
				offset2 = parseInt(offset1, 16) + 0x4;
				offset2 = offset2.toString(16).toUpperCase();
				offset2 = String("00000000" + offset2).slice(-8);
				break;
			case 2:
				if (text.length == 0){
					add3 = "00000000";
				} else {
					let temp = text.substring(0,8);
					text = text.substring(8);
					add3 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				}
				offset3 = parseInt(offset2, 16) + 0x4;
				offset3 = offset3.toString(16).toUpperCase();
				offset3 = String("00000000" + offset3).slice(-8);
				break;
			case 3:
				if (text.length == 0){
					add4 = "00000000";
				} else {
					let temp = text.substring(0,8);
					text = text.substring(8);
					add4 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				}
				offset4 = parseInt(offset3, 16) + 0x4;
				offset4 = offset4.toString(16).toUpperCase();
				offset4 = String("00000000" + offset4).slice(-8);
				break;
			case 4:
				if (text.length == 0){
					add5 = "00000000";
				} else {
					let temp = text.substring(0,8);
					text = text.substring(8);
					add5 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				}
				offset5 = parseInt(offset4, 16) + 0x4;
				offset5 = offset5.toString(16).toUpperCase();
				offset5 = String("00000000" + offset5).slice(-8);
				break;
			case 5:
				if (text.length == 0){
					add6 = "00000000";
				} else {
					let temp = text.substring(0,8);
					text = text.substring(8);
					add6 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				}
				offset6 = parseInt(offset5, 16) + 0x4;
				offset6 = offset6.toString(16).toUpperCase();
				offset6 = String("00000000" + offset6).slice(-8);
				break;
			case 6:
				if (text.length == 0){
					add7 = "00000000";
				} else {
					let temp = text.substring(0,8);
					text = text.substring(8);
					add7 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				}
				offset7 = parseInt(offset6, 16) + 0x4;
				offset7 = offset7.toString(16).toUpperCase();
				offset7 = String("00000000" + offset7).slice(-8);
				break;
			case 7:
				if (text.length == 0){
					add8 = "00000000";
				} else {
					let temp = text.substring(0,8);
					text = text.substring(8);
					add8 = temp.substring(6,8) + temp.substring(4,6) + temp.substring(2,4) + temp.substring(0,2);
				}
				offset8 = parseInt(offset7, 16) + 0x4;
				offset8 = offset8.toString(16).toUpperCase();
				offset8 = String("00000000" + offset8).slice(-8);
				break;
		}
	}

	//console.log(offset1);
	//console.log(offset2);
	//console.log(offset7);
	//console.log(offset8);

	let pnach;
	if (firstPass){
		pnach = "gametitle=Radiata Stories\n";
		pnach += "comment=Character Name Changer" + "\n\n";
		firstPass = false;
	} else {
		pnach = "";
	}
	pnach += "//Character ID: " + charID.toString(16).toUpperCase() + " changed name to: " + name + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add1 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset1 + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add2 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset2 + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add3 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset3 + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add4 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset4 + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add5 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset5 + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add6 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset6 + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add7 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset7 + "\n";
	pnach += "patch=1,EE,60328CE0,extended," + add8 + "\n";
	pnach += "patch=1,EE,00020000,extended," + offset8 + "\n\n";

	//console.log(pnach);
	document.getElementById("results").innerHTML = "Added."
	fileD += pnach;
}

function download(){
	if (firstPass){
		alert("Nothing added.");
		return;
	}
	let a = document.createElement('a');
	a.href = "data:application/octet-stream,"+encodeURIComponent(fileD);
	a.download = '47B9B2FD.pnach';
	a.click();
	document.getElementById("results").innerHTML = "Downloaded. List has been cleared.";
	fileD = "";
	charArr = [];
	firstPass = true;
}

function stringEncoder(text) {
	result = "";
	for (let i = 0; i < text.length; i++){
		if (!(text.charAt(i) in charEncoding)){
			return alert(text.charAt(i) + " is an invalid character!")
		}
		result += changeEndianness2(charEncoding[text.charAt(i)].toString(16).padStart(4, 0).toUpperCase());
	}
	return result;
			/*case "Ã¨":
				result += "510101000100";
				break;
			case "Ã©":
				result += "520101000100";
				break;
			case "Ãª":
				result += "530101000100";
				break;
			case "Ã«":
				result += "540101000100";
				break;
			case "Ã£":
				result += "550101000100";
				break;
			case "Ã¡":
				result += "5B0101000100";
				break;
			case "Ã§":
				result += "5F0101000100";
				break;
			case "â¦":
				result += "130013001300";
				break;
			case "Âµ":
				result += "1CC0";
				break;
			case "\n":
				result += "0A00";
				break;*/
			/*case "4D00":
				result += "â";
				break;
			case "4E00":
				result += "â";
				break;
			case "4F00":
				result += "â¡";
				break;
			case "5000":
				result += "â¬";
				break;
			case "5100":
				result += "â³";
				break;
			case "5200":
				result += "â²";
				break;
			case "5300":
				result += "â½";
				break;
			case "5400":
				result += "â¼";
				break;
			case "5500":
				result += "â";
				break;
			case "5600":
				result += "â";
				break;
			case "5700":
				result += "â";
				break;
			case "5800":
				result += "â";
				break;*/
}

const changeEndianness = (string) => {
        const result = [];
        let len = string.length - 2;
        while (len >= 0) {
          result.push(string.substr(len, 2));
          len -= 2;
        }
        return result.join('');
}

function changeEndianness2(string) {
        const result = [];
        let len = string.length - 2;
        while (len >= 0) {
          result.push(string.substr(len, 2));
          len -= 2;
        }
        return result.join('');
}

function recruitChar(id){
    char = changeEndianness2(id.toString(16).padStart(4, '0'));
    full = "";
    full += "14 03 00 80 20 0F 00 00";
    full += char;
    full += "00 0D 01 00 00 00 14 03 00 80 27 0F 00 00 00 00 00 1D 01 00 00 00 02 03 00 80 04 00 00 87";
    full += char;
    full += "48 00 00 00 00 00 14 03 00 80 20 0F 00 00";
    full += char;
    full += "00 48 01 00 00 00 0F 00 00 80 14 03 00 80 20 02 00 00";
    full += char;
    full += "00 00";
    full += char;
    full += "00 01 D5 04 03 80 13 90 00 00";
    full += char;
    full += "00 00";
    full += char;
    full += "00 00 00 00 00 00 0F 00 00 80 1B 02 01 80 17 00 07 00";
    full += char;
    full += "00 00 0F 00 00 00 1B 01 00 80 17 00 05 00 02 03 00 80 F9 FF FF 82 12 00 00 00 01 00 00 00 1B 01 00 80 17 00 02 00 14 03 00 00 21 0F 00 00";
    full += char;
    full += "00 09 1E 00 00 00";
    return full
}

function posCalculator(text) {
	let decimal = 0;
	for (let i = 0; i < text.length; i++){
			decimal += parseInt(charSpacing[text.charAt(i)]);
			/*console.log(text.charAt(i) + " is " + charSpacing[text.charAt(i)]);*/
	}
	decimal = decimal / 3;
	console.log(decimal)
	decimal = Math.round(decimal);
	console.log(decimal)
	decimal = -decimal;
	console.log(decimal)
  var size = 8;

  if (decimal >= 0) {
    var hexadecimal = decimal.toString(16);

    while ((hexadecimal.length % size) != 0) {
      hexadecimal = "" + 0 + hexadecimal;
    }

    return hexadecimal;
  } else {
    var hexadecimal = Math.abs(decimal).toString(16);
    while ((hexadecimal.length % size) != 0) {
      hexadecimal = "" + 0 + hexadecimal;
    }

    var output = '';
    for (i = 0; i < hexadecimal.length; i++) {
      output += (0x0F - parseInt(hexadecimal[i], 16)).toString(16);
    }

    output = (0x01 + parseInt(output, 16)).toString(16);
    return changeEndianness(output.substring(4, 8).toUpperCase());
  }
}


function lineBuild(){
	let text = document.getElementById('text').value;
	if (text.length < 3){
		alert("Text must be at least 3 characters long.")
		return;
	}
	let bustup = document.getElementById("bustup").checked
	let char = document.getElementById('char').value;
	char = parseInt(char, 16);
	char = char.toString(16).padStart(4, '0').toUpperCase();
	let lineOpt = document.getElementById('lineOpt').value;
	let lineNum;
	if (lineOpt == 1){
		lineNum = ++currentVoice;
		lineNum = lineNum.toString(16).padStart(4, '0').toUpperCase();
	} else{
		lineNum = document.getElementById('lineNum').value;
		lineNum = parseInt(lineNum);
		lineNum = lineNum.toString(16).padStart(4, '0').toUpperCase();
	}
	
	result = "";
	let textArr = text.split(/\n/);
	for(let i = 0; i < textArr.length; i++){
		for(let x = 0; x < textArr[i].length; x++){
			if (!(textArr[i].charAt(x) in charEncoding)){
				return alert(textArr[i].charAt(x) + " is an invalid character!")
			}
		}
	}
	if (textArr.length == 1){
		let textLength = text.length;
		textLength = Math.round(textLength /= 2) + 4;
		result += textLength.toString(16).padStart(2, '0').toUpperCase();
		result += "00 00 00 01 00 00 00";
		result += changeEndianness(char);
		result += "00 00 0F 25 00 00";
		result += textLength.toString(16).padStart(2, '0').toUpperCase();
		result += "00 0E 20 01 00";
		if (bustup) {
			result += "00";
		} else {
			result += "01";
		}
		result += "00 02 20 6A 69 5F 80 02 21 00 00 00 00 03 20 33 0B 66 16 05 01 07 10 00 03 04 20";
		result += posCalculator(textArr[0]);
		result += "BE 00 0F 28 1F 00";
		result += changeEndianness(lineNum);
		result += "0E 4E 01 00 01 00 76 00 00 00";
		result += stringEncoder(textArr[0]);
		result += "0F 20 78 00 03 00 00 00";
		result = result.replace(/\s/g,''); 
		lineArr.push(result);
		document.getElementById("results").innerHTML += "\n\n\"" + textArr[0] + "\"\n\nhas been added.";
	} else if (textArr.length == 2){
		let textLength = text.length - textArr.length;
		textLength = Math.round(textLength /= 2) + 4;
		result += textLength.toString(16).padStart(2, '0').toUpperCase();
		result += "00 00 00 01 00 00 00";
		result += changeEndianness(char);
		result += "00 00 0F 25 00 00";
		result += textLength.toString(16).padStart(2, '0').toUpperCase();
		result += "00 0E 20 01 00";
		if (bustup) {
			result += "00";
		} else {
			result += "01";
		}
		result += "00 02 20 6A 69 5F 80 02 21 00 00 00 00 03 20 33 0B 66 16 05 01 07 10 00 03 04 20";
		result += posCalculator(textArr[0]);
		result += "A8 00 0F 28 1F 00";
		result += changeEndianness(lineNum);
		result += "0E 4E 01 00 01 00 60 00 00 00";
		result += stringEncoder(textArr[0]);
		result += "0A 00 04 20";
		result += posCalculator(textArr[1]);
		result += "D0 00";
		result += stringEncoder(textArr[1]);
		result += "0F 20 78 00 03 00 00 00";
		result = result.replace(/\s/g,''); 
		lineArr.push(result);
		document.getElementById("results").innerHTML += "\n\n\"" + textArr[0] + "\n" + textArr[1] + "\"\n\nhas been added.";
	} else if (textArr.length == 3){
		let textLength = text.length - textArr.length;
		textLength = Math.round(textLength /= 2) + 4;
		result += textLength.toString(16).padStart(2, '0').toUpperCase();
		result += "00 00 00 01 00 00 00";
		result += changeEndianness(char);
		result += "00 00 0F 25 00 00";
		result += textLength.toString(16).padStart(2, '0').toUpperCase();
		result += "00 0E 20 01 00";
		if (bustup) {
			result += "00";
		} else {
			result += "01";
		}
		result += "00 02 20 6A 69 5F 80 02 21 00 00 00 00 03 20 33 0B 66 16 05 01 07 10 00 03 04 20";
		result += posCalculator(textArr[0]);
		result += "88 00 0F 28 1F 00";
		result += changeEndianness(lineNum);
		result += "0E 4E 01 00 01 00 40 00 00 00";
		result += stringEncoder(textArr[0]);
		result += "0A 00 04 20";
		result += posCalculator(textArr[1]);
		result += "B0 00";
		result += stringEncoder(textArr[1]);
		result += "0A 00 04 20";
		result += posCalculator(textArr[2]);
		result += "D8 00";
		result += stringEncoder(textArr[2]);
		result += "0F 20 78 00 03 00 00 00";
		result = result.replace(/\s/g,''); 
		lineArr.push(result);
		document.getElementById("results").innerHTML += "\n\n\"" + textArr[0] + "\n" + textArr[1] + "\n" + textArr[2] + "\"\n\nhas been added.";
	} else {
		return alert("Too many line breaks, three max per line.");
	}
}

function download2(){
	if (lineArr.length == 0){
		alert("Nothing added.");
		return;
	}
	if (document.getElementById("null").checked){
		lineArr.unshift("0000000001000000010000000F25000000000E200100010002206A695F800221000000000320330B661605010710000304200000BE000E4E01000100760000000E24010002010000");
	}
	let totalSize = 0;
	let currentLength = 0;
	let baseLength = 48;
	baseLength += 8*lineArr.length;
	for (let i = 0; i < lineArr.length; i++){
		lineArr[i] = lineArr[i].replace(/\s/g,'');
		if(i == 0){
			while(((lineArr[i].length / 2) % 4) != 0){
				lineArr[i] += "00";
			}
			currentLength = baseLength/2;
			totalSize += currentLength + (lineArr[0].length / 2);
			let temp = currentLength.toString(16).padStart(8, '0').toUpperCase()
			temp = changeEndianness(temp);
			pointerArr.push(temp);
		} else {
			while(((lineArr[i].length / 2) % 4) != 0){
				lineArr[i] += "00";
			}
			currentLength += (lineArr[i-1].length / 2);
			totalSize += lineArr[i].length / 2;
			let temp = currentLength.toString(16).padStart(8, '0').toUpperCase();
			temp = changeEndianness(temp);
			pointerArr.push(temp);
		}
	}
	totalSize = totalSize.toString(16).padStart(8, '0').toUpperCase();
	totalSize = changeEndianness(totalSize);
	let lineCount = lineArr.length;
	lineCount = lineCount.toString(16).padStart(8, '0').toUpperCase();
	lineCount = changeEndianness(lineCount);
	let output = "52 4D 46 31 CE 00 00 00 00 00 00 00";
	output += totalSize;
	output += lineCount;
	output += totalSize;
	for (let i = 0; i < pointerArr.length; i++){
		output += pointerArr[i];
	}
	for (let i = 0; i < lineArr.length; i++){
		output += lineArr[i];
	}
	output = output.replace(/\s/g,'');
	navigator.clipboard.writeText(output)
  .then(() => {
  	if (document.getElementById("null").checked){
  		lineArr.shift();
  	}
  	pointerArr = [];
    alert("Data copied to clipboard.");
  })
  .catch(err => {
  	if (document.getElementById("null").checked){
  		lineArr.shift();
  	}
  	pointerArr = [];
    console.log('Error: ', err);
  });
	//document.getElementById("results").innerHTML = output;
}

function hexTrim(text){
	result = "";
	rmf = false;
	text = text.replace(/\s/g,''); 
	while (text.length > 0) {
		if (!rmf) {
			id = text.substring(0, 8);
			if (id == "524D4631") {
				rmf = true;
				result += text.substring(0,2);
			}
			text = text.substring(2);
		} else if (rmf) {
			id = text.substring(0,8);
			if (id == "4B6F6473"){
				rmf = false;
			} else {
				result += text.substring(0,2);
			}
			text = text.substring(2);
		}
	}
	return result;
}

function stringDecoder(text) {
	result = "";
	text = text.replace(/\s/g,''); 
	while (text.length > 0){
		temp = text.substring(0, 4);
		text = text.substring(4);

		if (temp != ""){
			switch(temp){
				case "0100":
					result += " ";
					break;
				case "6300":
					result += "A";
					break;
				case "6400":
					result += "B";
					break;
				case "6500":
					result += "C";
					break;
				case "6600":
					result += "D";
					break;
				case "6700":
					result += "E";
					break;
				case "6800":
					result += "F";
					break;
				case "6900":
					result += "G";
					break;
				case "6A00":
					result += "H";
					break;
				case "6B00":
					result += "I";
					break;
				case "6C00":
					result += "J";
					break;
				case "6D00":
					result += "K";
					break;
				case "6E00":
					result += "L";
					break;
				case "6F00":
					result += "M";
					break;
				case "7000":
					result += "N";
					break;
				case "7100":
					result += "O";
					break;
				case "7200":
					result += "P";
					break;
				case "7300":
					result += "Q";
					break;
				case "7400":
					result += "R";
					break;
				case "7500":
					result += "S";
					break;
				case "7600":
					result += "T";
					break;
				case "7700":
					result += "U";
					break;
				case "7800":
					result += "V";
					break;
				case "7900":
					result += "W";
					break;
				case "7A00":
					result += "X";
					break;
				case "7B00":
					result += "Y";
					break;
				case "7C00":
					result += "Z";
					break;
				case "7D00":
					result += "a";
					break;
				case "7E00":
					result += "b";
					break;
				case "7F00":
					result += "c";
					break;
				case "8000":
					result += "d";
					break;
				case "8100":
					result += "e";
					break;
				case "8200":
					result += "f";
					break;
				case "8300":
					result += "g";
					break;
				case "8400":
					result += "h";
					break;
				case "8500":
					result += "i";
					break;
				case "8600":
					result += "j";
					break;
				case "8700":
					result += "k";
					break;
				case "8800":
					result += "l";
					break;
				case "8900":
					result += "m";
					break;
				case "8A00":
					result += "n";
					break;
				case "8B00":
					result += "o";
					break;
				case "8C00":
					result += "p";
					break;
				case "8D00":
					result += "q";
					break;
				case "8E00":
					result += "r";
					break;
				case "8F00":
					result += "s";
					break;
				case "9000":
					result += "t";
					break;
				case "9100":
					result += "u";
					break;
				case "9200":
					result += "v";
					break;
				case "9300":
					result += "w";
					break;
				case "9400":
					result += "x";
					break;
				case "9500":
					result += "y";
					break;
				case "9600":
					result += "z";
					break;
				case "6200":
					result += "9";
					break;
				case "6100":
					result += "8";
					break;
				case "6000":
					result += "7";
					break;
				case "5F00":
					result += "6";
					break;
				case "5E00":
					result += "5";
					break;
				case "5D00":
					result += "4";
					break;
				case "5C00":
					result += "3";
					break;
				case "5B00":
					result += "2";
					break;
				case "5A00":
					result += "1";
					break;
				case "5900":
					result += "0";
					break;
				/*case "1C00":
					result += "/";
					break;
				case "1A00":
					result += "ã";
					break;*/
				case "1B00":
					result += "ã¼";
					break;
				case "1D00":
					result += "\\";
					break;
				case "1F00":
					result += "...";
					break;
				case "1800":
					result += "!";
					break;
				case "1700":
					result += "?";
					break;
				/*case "1900":
					result += "_";
					break;*/
				case "1300":
					result += ".";
					break;
				case "1200":
					result += ",";
					break;
				/*case "1000":
					result += "ã";
					break;
				case "1100":
					result += "ã";
					break;*/
				/*case "1400":
					result += "ã»";
					break;*/
				case "1500":
					result += ":";
					break;
				/*case "1600":
					result += ";";
					break;*/
				/*case "1E00":
					result += "~";
					break;*/
				case "2000":
					result += "â";
					break;
				case "2100":
					result += "â";
					break;
				case "2200":
					result += "â";
					break;
				case "2300":
					result += "â";
					break;
				case "2400":
					result += "(";
					break;
				case "2500":
					result += ")";
					break;
				/*case "2800":
					result += "[";
					break;
				case "2900":
					result += "]";
					break;
				case "3000":
					result += "ã";
					break;
				case "3100":
					result += "ã";
					break;
				case "3200":
					result += "ã";
					break;
				case "3300":
					result += "ã";
					break;
				case "3400":
					result += "ã";
					break;
				case "3500":
					result += "ã";
					break;
				case "3600":
					result += "+";
					break;
				case "3700":
					result += "-";
					break;
				case "3800":
					result += "Â±";
					break;
				case "3900":
					result += "Ã";
					break;
				case "3A00":
					result += "Ã·";
					break;
				case "3B00":
					result += "=";
					break;
				case "3C00":
					result += "â ";
					break;
				case "3D00":
					result += "<";
					break;
				case "3E00":
					result += ">";
					break;
				case "3F00":
					result += "â¤";
					break;
				case "4000":
					result += "â¥";
					break;
				case "4100":
					result += "ï¿¥";
					break;
				case "4200":
					result += "$";
					break;
				case "4300":
					result += "%";
					break;
				case "4400":
					result += "#";
					break;
				case "4500":
					result += "&";
					break;
				case "4600":
					result += "*";
					break;
				case "4700":
					result += "@";
					break;
				case "4800":
					result += "â";
					break;
				case "4900":
					result += "â";
					break;
				case "4A00":
					result += "â";
					break;
				case "4B00":
					result += "â";
					break;
				case "4C00":
					result += "â";
					break;
				case "4D00":
					result += "â";
					break;
				case "4E00":
					result += "â";
					break;
				case "4F00":
					result += "â¡";
					break;
				case "5000":
					result += "â¬";
					break;
				case "5100":
					result += "â³";
					break;
				case "5200":
					result += "â²";
					break;
				case "5300":
					result += "â½";
					break;
				case "5400":
					result += "â¼";
					break;
				case "5500":
					result += "â";
					break;
				case "5600":
					result += "â";
					break;
				case "5700":
					result += "â";
					break;
				case "5800":
					result += "â";
					break;*/
				case "0F20":
					result += "\n\n";
					break;
				case "0A00":
					result += "\n";
					break;
				default:
					//result += "ï¿½";
			}
		} else {
			break;
		}
	}
	return result;
}

function copyClip(text){
	navigator.clipboard.writeText(text)
  .then(() => {
    alert("Data copied to clipboard.");
  })
  .catch(err => {
    console.log('Error: ', err);
  });
}

function initialiseCharacter(){
	let char1 = document.getElementById('char1').value;
	char1 = parseInt(char1, 16);
  char1 = char1.toString(16).padStart(8, '0').toUpperCase();
  char1 = changeEndianness2(char1);
  let char3 = document.getElementById('char3').value;
  char3 = parseInt(char3, 16);
  char3 = char3.toString(16).padStart(2, '0').toUpperCase();

  let string = '';
  string += '39 02 22 00 01 00 00 00';
  string += char1;
  string += 'C0 02 01 80';
  string += char1;
  string += '00 00 05 00 27 01 01 80';
  string += char1;
  string += '20 03 01 80';
  string += char1;
  string += '01 00 00 00';
  string += char3;
  string += '01 01 00';

  copyClip(string);
}

let charSpacing = {
    "0": "26",
    "1": "12",
    "2": "23",
    "3": "24",
    "4": "26",
    "5": "24",
    "6": "26",
    "7": "23",
    "8": "27",
    "9": "25",
    "ã": "12",
    "ã": "12",
    ",": "10",
    ".": "10",
    "ã»": "19",
    ":": "11",
    ";": "11",
    "?": "20",
    "!": "10",
    "_": "23",
    "ã¼": "30",
    "/": "16",
    "~": "23",
    "â¦": "29",
    "â": "10",
    "'": "10",
    "â": "17",
    "\"": "17",
    "(": "15",
    ")": "14",
    "ã": "16",
    "ã": "15",
    "[": "16",
    "]": "15",
    "{": "18",
    "}": "18",
    "ã": "17",
    "ã": "17",
    "ã": "21",
    "ã": "21",
    "ã": "18",
    "ã": "18",
    "ã": "19",
    "ã": "19",
    "ã": "25",
    "ã": "25",
    "+": "22",
    "-": "15",
    "Â±": "28",
    "Ã": "26",
    "Ã·": "29",
    "â ": "28",
    "<": "21",
    ">": "21",
    "â¦": "29",
    "â§": "29",
    "\\": "29",
    "$": "21",
    "%": "26",
    "&": "26",
    "*": "17",
    "@": "30",
    "â": "30",
    "â": "30",
    "â": "30",
    "â": "30",
    "â": "30",
    "â": "30",
    "â": "30",
    "â¡": "28",
    "â ": "28",
    "â³": "30",
    "â²": "30",
    "â½": "30",
    "â¼": "30",
    "â": "30",
    "â": "30",
    "â": "19",
    "â": "19",
    "A": "26",
    "B": "25",
    "C": "23",
    "D": "25",
    "E": "23",
    "F": "21",
    "G": "29",
    "H": "26",
    "I": "10",
    "J": "22",
    "K": "24",
    "L": "20",
    "M": "30",
    "N": "26",
    "O": "27",
    "P": "23",
    "Q": "28",
    "R": "24",
    "S": "26",
    "T": "24",
    "U": "24",
    "V": "23",
    "W": "30",
    "X": "21",
    "Y": "26",
    "Z": "24",
    "a": "22",
    "b": "22",
    "c": "19",
    "d": "23",
    "e": "20",
    "f": "18",
    "g": "20",
    "h": "20",
    "i": "11",
    "j": "15",
    "k": "19",
    "l": "11",
    "m": "30",
    "n": "22",
    "o": "22",
    "p": "22",
    "q": "25",
    "r": "18",
    "s": "22",
    "t": "21",
    "u": "20",
    "v": "19",
    "w": "26",
    "x": "18",
    "y": "22",
    "z": "19",
    "ã": "28",
    "ã": "30",
    "ã": "27",
    "ã": "29",
    "ã": "26",
    "ã": "27",
    "ã": "29",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã": "25",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã ": "30",
    "ã¡": "30",
    "ã¢": "30",
    "ã£": "27",
    "ã¤": "29",
    "ã¥": "30",
    "ã¦": "30",
    "ã§": "30",
    "ã¨": "29",
    "ã©": "30",
    "ãª": "30",
    "ã«": "30",
    "ã¬": "30",
    "ã­": "30",
    "ã®": "30",
    "ã¯": "30",
    "ã°": "30",
    "ã±": "30",
    "ã²": "30",
    "ã³": "30",
    "ã´": "30",
    "ãµ": "30",
    "ã¶": "30",
    "ã·": "30",
    "ã¸": "30",
    "ã¹": "30",
    "ãº": "30",
    "ã»": "30",
    "ã¼": "30",
    "ã½": "30",
    "ã¾": "30",
    "ã¿": "30",
    "ã": "30",
    "ã": "29",
    "ã": "28",
    "ã": "28",
    "ã": "30",
    "ã": "28",
    "ã": "29",
    "ã": "28",
    "ã": "30",
    "ã": "28",
    "ã": "26",
    "ã": "29",
    "ã": "30",
    "ã": "28",
    "ã": "28",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã¡": "28",
    "ã¢": "29",
    "ã£": "26",
    "ã¤": "30",
    "ã¥": "26",
    "ã¦": "30",
    "ã§": "29",
    "ã¨": "30",
    "ã©": "29",
    "ãª": "30",
    "ã«": "30",
    "ã­": "30",
    "ã¯": "30",
    "ã±": "30",
    "ã³": "30",
    "ãµ": "30",
    "ã·": "30",
    "ã¹": "30",
    "ã»": "30",
    "ã½": "30",
    "ã¿": "30",
    "ã": "30",
    "ã": "27",
    "ã": "30",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã": "25",
    "ã": "30",
    "ã": "29",
    "ã": "30",
    "ã": "30",
    "ã": "30",
    "ã": "29",
    "ã": "28",
    "ã ": "30",
    "ã¡": "28",
    "ã¢": "30",
    "ã£": "27",
    "ã¤": "29",
    "ã¥": "29",
    "ã¦": "30",
    "ã§": "26",
    "ã¨": "27",
    "ã©": "28",
    "ãª": "26",
    "ã«": "30",
    "ã¬": "30",
    "ã­": "27",
    "ã¯": "28",
    "ã²": "28",
    "ã³": "30",
    "ãµ": "27",
    "ã¶": "29",
    " ": "12",
    "ç·": "30",
    "ä¾": "30",
    "é ¼": "30",
    "æ¸": "30",
    "æ": "30",
    "é¨": "30",
    "æ": "30",
    "å£": "29",
    "é": "30",
    "æ§": "30",
    "é ": "30",
    "è": "30",
    "å": "30",
    "ç¨": "30",
    "ç¶": "30",
    "æ": "30",
    "è": "30",
    "æ§": "30",
    "æ¦": "30",
    "é": "30",
    "å¿": "30",
    "å¾": "30",
    "äºº": "30",
    "å¥½": "30",
    "æ­¦": "30",
    "å¨": "30",
    "å·¥": "30",
    "æ¿": "30",
    "å£«": "30",
    "é­": "30",
    "è¡": "30",
    "å¸«": "30",
    "å§": "30",
    "ä¾¶": "30",
    "ç": "30",
    "è³": "30",
    "ç": "30",
    "ç©": "30",
    "å³": "29",
    "é": "30",
    "ä¼": "30",
    "æ¬": "30",
    "æ­´": "30",
    "å²": "30",
    "ä¸": "30",
    "ä¸": "30",
    "æ¿": "30",
    "å¤§": "30",
    "è": "30",
    "å£": "30",
    "é": "30",
    "æ¾": "30",
    "å¥®": "30",
    "èµ·": "30",
    "ç": "30",
    "ç¼": "30",
    "èª­": "30",
    "è¾¼": "30",
    "ä¿": "30",
    "å­": "30",
    "å·®": "30",
    "ç©º": "30",
    "ä»": "30",
    "å®¹": "30",
    "é": "30",
    "åº": "29",
    "å¥": "30",
    "çª": "30",
    "å": "29",
    "è»½": "30",
    "é": "30",
    "è£": "30",
    "è¡": "30",
    "åµ": "30",
    "ä¸": "30",
    "â ": "23",
    "â¡": "26",
    "å·": "30",
    "â": "30",
    "å¥³": "30",
    "ç·": "28",
    "é¨": "30",
    "è¦": "30",
    "ç¿": "29",
    "é»": "30",
    "é¨": "30",
    "æ¨": "30",
    "é": "30",
    "ç«": "30",
    "äº": "30",
    "æ°´": "30",
    "å°": "30",
    "é¢¨": "30",
    "ç¡": "30",
    "æ¯": "30",
    "å": "30",
    "çµ": "30",
    "é": "30",
    "ç¸": "30",
    "åª": "30",
    "æ··": "30",
    "ä¹±": "30",
    "è¿": "30",
    "ç¼": "30",
    "å": "29",
    "å¾©": "30",
    "å¸": "30",
    "å": "30",
    "ç": "30",
    "ç³": "30",
    "å": "30",
    "â": "30",
    "â": "28",
    "é£": "30",
    "å": "30",
    "ç": "30",
    "é·": "30",
    "ç£": "30",
    "ç¥": "30",
    "æ®¿": "30",
    "æ­»": "30"
}

let charEncoding = {
  " ": 1,
  "0": 89,
  "1": 90,
  "2": 91,
  "3": 92,
  "4": 93,
  "5": 94,
  "6": 95,
  "7": 96,
  "8": 97,
  "9": 98,
  "ï½¤": 16,
  "ï½¡": 17,
  ",": 18,
  ".": 19,
  "ï½¥": 20,
  ":": 21,
  ";": 22,
  "?": 23,
  "!": 24,
  "_": 25,
  "ã": 26,
  "ï½°": 27,
  "/": 28,
  "ï¼¼": 29,
  "~": 30,
  "â¦": 31,
  "â": 32,
  "'": 33,
  "â": 34,
  "\"": 35,
  "(": 36,
  ")": 37,
  "ã": 38,
  "ã": 39,
  "[": 40,
  "]": 41,
  "{": 42,
  "}": 43,
  "ã": 44,
  "ã": 45,
  "ã": 46,
  "ã": 47,
  "ï½¢": 48,
  "ï½£": 49,
  "ã": 50,
  "ã": 51,
  "ã": 52,
  "ã": 53,
  "+": 54,
  "-": 55,
  "Â±": 56,
  "Ã": 57,
  "Ã·": 58,
  "â ": 60,
  "<": 61,
  ">": 62,
  "â¦": 63,
  "â§": 64,
  "\\": 65,
  "$": 66,
  "%": 67,
  "&": 69,
  "*": 70,
  "@": 71,
  "â": 414,
  "â": 73,
  "â": 74,
  "â": 75,
  "â": 76,
  "â": 77,
  "â": 78,
  "â¡": 79,
  "â ": 80,
  "â³": 81,
  "â²": 82,
  "â½": 83,
  "â¼": 84,
  "â": 85,
  "â": 86,
  "â": 87,
  "â": 88,
  "A": 99,
  "B": 100,
  "C": 101,
  "D": 102,
  "E": 103,
  "F": 104,
  "G": 105,
  "H": 106,
  "I": 107,
  "J": 108,
  "K": 109,
  "L": 110,
  "M": 111,
  "N": 112,
  "O": 113,
  "P": 114,
  "Q": 115,
  "R": 116,
  "S": 117,
  "T": 118,
  "U": 119,
  "V": 120,
  "W": 121,
  "X": 122,
  "Y": 123,
  "Z": 124,
  "a": 125,
  "b": 126,
  "c": 127,
  "d": 128,
  "e": 129,
  "f": 130,
  "g": 131,
  "h": 132,
  "i": 133,
  "j": 134,
  "k": 135,
  "l": 136,
  "m": 137,
  "n": 138,
  "o": 139,
  "p": 140,
  "q": 141,
  "r": 142,
  "s": 143,
  "t": 144,
  "u": 145,
  "v": 146,
  "w": 147,
  "x": 148,
  "y": 149,
  "z": 150,
  "ã": 151,
  "ã": 152,
  "ã": 153,
  "ã": 154,
  "ã": 155,
  "ã": 156,
  "ã": 157,
  "ã": 158,
  "ã": 159,
  "ã": 160,
  "ã": 161,
  "ã": 162,
  "ã": 163,
  "ã": 164,
  "ã": 165,
  "ã": 166,
  "ã": 167,
  "ã": 168,
  "ã": 169,
  "ã": 170,
  "ã": 171,
  "ã": 172,
  "ã": 173,
  "ã": 174,
  "ã": 175,
  "ã": 176,
  "ã": 177,
  "ã": 178,
  "ã": 179,
  "ã": 180,
  "ã": 181,
  "ã ": 182,
  "ã¡": 183,
  "ã¢": 184,
  "ã£": 185,
  "ã¤": 186,
  "ã¥": 187,
  "ã¦": 188,
  "ã§": 189,
  "ã¨": 190,
  "ã©": 191,
  "ãª": 192,
  "ã«": 193,
  "ã¬": 194,
  "ã­": 195,
  "ã®": 196,
  "ã¯": 197,
  "ã°": 198,
  "ã±": 199,
  "ã²": 200,
  "ã³": 201,
  "ã´": 202,
  "ãµ": 203,
  "ã¶": 204,
  "ã·": 205,
  "ã¸": 206,
  "ã¹": 207,
  "ãº": 208,
  "ã»": 209,
  "ã¼": 210,
  "ã½": 211,
  "ã¾": 212,
  "ã¿": 213,
  "ã": 214,
  "ã": 215,
  "ã": 216,
  "ã": 217,
  "ã": 218,
  "ã": 219,
  "ã": 220,
  "ã": 221,
  "ã": 222,
  "ã": 223,
  "ã": 224,
  "ã": 225,
  "ã": 226,
  "ã": 227,
  "ã": 228,
  "ã": 229,
  "ã": 230,
  "ã": 231,
  "ã": 232,
  "ã": 233,
  "ã¡": 234,
  "ã¢": 235,
  "ã£": 236,
  "ã¤": 329,
  "ã¥": 238,
  "ã¦": 239,
  "ã§": 240,
  "ã¨": 330,
  "ã©": 242,
  "ãª": 243,
  "ã«": 244,
  "ã¬": 245,
  "ã­": 246,
  "ã®": 247,
  "ã¯": 248,
  "ã°": 249,
  "ã±": 250,
  "ã²": 251,
  "ã³": 252,
  "ã´": 253,
  "ãµ": 254,
  "ã¶": 255,
  "ã·": 272,
  "ã¸": 273,
  "ã¹": 274,
  "ãº": 275,
  "ã»": 276,
  "ã¼": 277,
  "ã½": 278,
  "ã¾": 279,
  "ã¿": 280,
  "ã": 281,
  "ã": 282,
  "ã": 283,
  "ã": 284,
  "ã": 285,
  "ã": 286,
  "ã": 287,
  "ã": 288,
  "ã": 289,
  "ã": 290,
  "ã": 291,
  "ã": 292,
  "ã": 293,
  "ã": 294,
  "ã": 295,
  "ã": 296,
  "ã": 297,
  "ã": 298,
  "ã": 299,
  "ã": 300,
  "ã": 301,
  "ã": 302,
  "ã": 303,
  "ã": 304,
  "ã": 305,
  "ã": 306,
  "ã": 307,
  "ã": 308,
  "ã": 309,
  "ã": 310,
  "ã": 311,
  "ã": 312,
  "ã ": 313,
  "ã¡": 314,
  "ã¢": 315,
  "ã£": 316,
  "ã¤": 317,
  "ã¥": 318,
  "ã¦": 319,
  "ã§": 320,
  "ã¨": 321,
  "ã©": 322,
  "ãª": 323,
  "ã«": 324,
  "ã¬": 325,
  "ã­": 326,
  "ã¯": 328,
  "ã²": 331,
  "ã³": 332,
  "ã´": 333,
  "ãµ": 334,
  "ã¶": 335,
  "ç·": 336,
  "ä¾": 337,
  "é ¼": 338,
  "æ¸": 339,
  "æ": 340,
  "é¨": 341,
  "æ": 342,
  "å£": 343,
  "é": 344,
  "æ§": 345,
  "é ": 346,
  "è": 347,
  "å": 348,
  "ç¨": 349,
  "ç¶": 350,
  "æ": 351,
  "è": 352,
  "æ§": 353,
  "æ¦": 354,
  "é": 355,
  "å¿": 356,
  "å¾": 357,
  "äºº": 358,
  "å¥½": 359,
  "æ­¦": 360,
  "å¨": 361,
  "å·¥": 362,
  "æ¿": 363,
  "å£«": 364,
  "é­": 365,
  "è¡": 366,
  "å¸«": 367,
  "å§": 368,
  "ä¾¶": 369,
  "ç": 370,
  "è³": 371,
  "ç": 372,
  "ç©": 373,
  "å³": 374,
  "é": 375,
  "ä¼": 376,
  "æ¬": 377,
  "æ­´": 378,
  "å²": 379,
  "ä¸": 380,
  "ä¸": 381,
  "æ¿": 382,
  "å¤§": 383,
  "è": 384,
  "å£": 385,
  "é": 386,
  "æ¾": 387,
  "å¥®": 388,
  "èµ·": 389,
  "ç": 390,
  "ç¼": 391,
  "èª­": 392,
  "è¾¼": 393,
  "ä¿": 394,
  "å­": 395,
  "å·®": 396,
  "ç©º": 397,
  "ä»": 398,
  "å®¹": 399,
  "é": 400,
  "åº": 401,
  "å¥": 402,
  "çª": 403,
  "å": 404,
  "è»½": 405,
  "é": 406,
  "è£": 407,
  "è¡": 408,
  "åµ": 409,
  "ä¸": 410,
  "â ": 411,
  "â¡": 412,
  "å·": 413,
  "å¥³": 415,
  "ç·": 416,
  "é¨": 417,
  "è¦": 418,
  "ç¿": 419,
  "é»": 420,
  "é¨": 421,
  "æ¨": 422,
  "é": 423,
  "ç«": 424,
  "äº": 425,
  "æ°´": 426,
  "å°": 427,
  "é¢¨": 428,
  "ç¡": 429,
  "æ¯": 430,
  "å": 431,
  "çµ": 432,
  "é": 433,
  "ç¸": 434,
  "åª": 435,
  "æ··": 436,
  "ä¹±": 437,
  "è¿": 438,
  "ç¼": 439,
  "å": 440,
  "å¾©": 441,
  "å¸": 442,
  "å": 443,
  "ç": 444,
  "ç³": 445,
  "å": 446,
  "â": 447,
  "â": 448,
  "é£": 449,
  "å": 450,
  "ç": 451,
  "é·": 452,
  "ç£": 453,
  "ç¥": 454,
  "æ®¿": 455,
  "æ­»": 456
}